// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  deletedAt     DateTime?

  // accounts Account[]
  // sessions Session[]
  // projects ProjectUsers[]
  links Link[]
  // tokens   Token[]
}

model Link {
  id        String    @id @default(cuid())
  domain    String // domain of the link (e.g. qurl.li) – also stored on Redis
  key       String // key of the link (e.g. /github) – also stored on Redis
  url       String // target url (e.g. https://github.com/qurlhq/sdk) – also stored on Redis
  archived  Boolean   @default(false) // whether the link is archived or not
  expiresAt DateTime? // when the link expires – stored on Redis via ttl
  password  String? // password to access the link

  proxy       Boolean @default(false) // Proxy to use custom OG tags (stored on redis) – if false, will use OG tags from target url
  title       String? // OG title for the link (e.g. qURL.li - Link Management Infrastructure)
  description String? @db.VarChar(280) // OG description for the link (e.g. A link management tool for modern marketing teams to create, share, and track short links.)
  image       String? // OG image for the link (e.g. https://dub.sh/og-image.png)

  // UTM parameters
  utmSource   String? // UTM source for the link (e.g. youtube.com)
  utmMedium   String? // UTM medium for the link (e.g. social)
  utmCampaign String? // UTM campaign for the link (e.g. summer-sale)
  utmTerm     String? // UTM term for the link (e.g. qurl)
  utmContent  String? // UTM content for the link (e.g. description)

  // Link cloaking/masking via rewrite
  rewrite Boolean @default(false) // whether to rewrite the link or not

  // Custom device targeting
  ios     String? // custom link for iOS devices
  android String? // custom link for Android devices
  geo     Json? // custom link for specific countries

  // User who created the link
  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  // Project that the link belongs to
  // project       Project? @relation(fields: [projectId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  // projectId     String?
  // Relational reference to the project domain
  // projectDomain Domain?  @relation(fields: [domain], references: [slug], onUpdate: Cascade, onDelete: Cascade)

  publicStats   Boolean   @default(false) // whether to show public stats or not
  clicks        Int       @default(0) // number of clicks
  lastClicked   DateTime? // when the link was last clicked
  checkDisabled Boolean   @default(false) // disable 404 checking
  lastChecked   DateTime? // when the link was last checked for 404s
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Link tags
  // tag   Tag?    @relation(fields: [tagId], references: [id])
  // tagId String?

  // Comments on the particular shortlink
  comments String?
  // @@fulltext([key, url])

  @@unique([domain, key])
  // @@index(projectId)
  // @@index(domain)
  // @@index(tagId)
  // @@index(proxy)
  // @@index(password)
  // @@index(createdAt(sort: Desc))
  // @@index(clicks(sort: Desc))
  // @@index(lastClicked)
  // @@index(checkDisabled)
  // @@index(lastChecked(sort: Asc))
  @@index(userId)
}
